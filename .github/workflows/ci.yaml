name: CI Tests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  matrix:
    name: Generate modules matrix
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.modules.outputs.matrix }}
      examples: ${{ steps.examples.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - id: modules
        run: echo "::set-output name=matrix::[$(modules=($(ls modules)); printf '"%s",' "${modules[@]}")]"

      - id: examples
        run: echo "::set-output name=matrix::[$(examples=($(ls examples/*.tf | sed -E 's`^examples/(.*)\.tf$`\1`')); printf '"%s",' "${examples[@]}")]"

  unit:
    name: Unit test ${{ matrix.path }}
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path: ${{fromJSON(needs.matrix.outputs.modules)}}
      fail-fast: false
    env:
      path: modules/${{ matrix.path }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - if: github.event_name == 'pull_request'
        name: Check if ${{ env.path }} should be tested
        id: changed
        uses: marceloprado/has-changed-path@v1
        with:
          paths: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Check Terraform format
        run: terraform fmt -check -recursive
        working-directory: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Validate Terraform config
        run: terraform validate
        working-directory: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          github_token: ${{ github.token }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Init TFLint
        run: tflint --init --config=../../.config/.tflint.hcl
        working-directory: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        name: Run TFLint
        run: tflint --format=compact --config=../../.config/.tflint.hcl
        working-directory: ${{ env.path }}

      - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
        id: tfsec
        name: Terraform security scan
        run: docker run -v "$(pwd):/src" tfsec/tfsec /src/${{ env.path }}

      # - if: github.event_name == 'push' || steps.changed.outputs.changed == 'true'
      #   name: Run checkov
      #   run: docker run -v "$(pwd):/src" bridgecrew/checkov -d /src/${{ env.path }} --config-file /src/.config/.checkov.yaml --compact

  e2e:
    name: End-to-end test oStack
    if: github.event_name == 'push' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')
    needs: [matrix, unit]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_case: ${{fromJSON(needs.matrix.outputs.examples)}}
      fail-fast: false
    env:
      TF_VAR_organization_name: olivr-test
      TF_VAR_cloud_default_provider: digitalocean
      TF_VAR_tfe_oauth_token_id: ${{ secrets.TFE_OAUTH_TOKEN_ID }}
      TF_VAR_vcs_write_token: '{ github="${{ secrets.COPYBARA_TOKEN }}" }'
      TF_VAR_sensitive_inputs: '{ my_other_secret = "This is marked as sensitive" }'
      GITHUB_TOKEN: ${{ secrets.COPYBARA_TOKEN }}
      GITHUB_OWNER: olivr-test
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Prepare test case
        run: TEST_NAME=$(sed -E 's`[^a-z0-9]`-`g' <<< "${{ matrix.test_case }}"); cp -a examples/common/. . && cat "examples/${{ matrix.test_case }}.tf" | sed 's`Olivr/oStack/oStack`./modules/ostack`g' | sed 's`version\s*=\s*".*$`prefix = "'"$TEST_NAME"'-"`' | sed 's`repo_archive_on_destroy\s*=.*$`repo_archive_on_destroy = false\nrepo_private = false`' > main.tf

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform config
        run: terraform validate

      - name: Terraform security scan
        run: docker run -v "$(pwd):/src" tfsec/tfsec /src

      - name: Run Terraform plan
        run: terraform plan -input=false -out tf.plan

      - name: Convert Terraform plan to JSON
        run: terraform show -json tf.plan > tf.plan.json

      - name: Prettify JSON plan to get meaningful errors in checkov
        # A weird GH actions bug injects actions metadata in the output so we filter only the lines containing JSON
        run: grep '^{"' tf.plan.json | jq '.' > tf.plan.pretty.json

      - name: Remove extraneous plan files
        run: rm -rf tf.plan.json

      - name: Run checkov
        run: docker run -v "$(pwd):/src" bridgecrew/checkov -d /src --config-file /src/.config/.checkov.yaml --repo-root-for-plan-enrichment /src

      - name: Apply Terraform
        run: terraform apply -auto-approve tf.plan

      - name: Destroy Terraform
        run: terraform destroy -auto-approve
      # - name: Run tests
      #   run: terraform test
      #   env:
      #     TF_VAR_organization_name: olivr-test
      #     TF_VAR_globalinfra_vcs_repo_name: null
      #     TF_VAR_tfe_oauth_token_id: ${{ secrets.TFE_OAUTH_TOKEN_ID }}
      #     TF_VAR_vcs_token_write: ${{ secrets.COPYBARA_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.COPYBARA_TOKEN }}
      #     LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      #     TFE_TOKEN: ${{ secrets.TFE_TOKEN }}

  finalizer:
    name: Passed all CI tests
    if: always()
    runs-on: ubuntu-latest
    needs: [unit, e2e]
    steps:
      - name: All tests passed successfully ✅
        if: needs.unit.result == 'success' && (needs.e2e.result == 'success' || needs.e2e.result == 'skipped')
        run: exit 0

      - name: Some tests failed ❌
        if: needs.unit.result != 'success' || (needs.e2e.result != 'success' && needs.e2e.result != 'skipped')
        run: exit 1
